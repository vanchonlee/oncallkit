# ========================================
# ADMIN USER AUTHENTICATION TESTS
# ========================================
# Default Admin Credentials:
# Email: admin@slar.com
# Password: admin123
# User ID: admin-user-id-001

### 1. Login with Admin User
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "admin@slar.com",
    "password": "admin123"
}

### 2. Get Admin User Details
GET http://localhost:8080/users/admin-user-id-001 HTTP/1.1

### 3. List All Users (Admin View)
GET http://localhost:8080/users HTTP/1.1

### 4. Test Wrong Password
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "admin@slar.com",
    "password": "wrongpassword"
}

### 5. Test Non-existent Email
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "notfound@slar.com",
    "password": "admin123"
}

# ========================================
# ADMIN PASSWORD MANAGEMENT
# ========================================

### 6. Change Admin Password
POST http://localhost:8080/auth/change-password HTTP/1.1
Content-Type: application/json

{
    "user_id": "admin-user-id-001",
    "old_password": "admin123",
    "new_password": "newadmin456"
}

### 7. Login with New Password
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "admin@slar.com",
    "password": "newadmin456"
}

### 8. Change Password Back to Original
POST http://localhost:8080/auth/change-password HTTP/1.1
Content-Type: application/json

{
    "user_id": "admin-user-id-001",
    "old_password": "newadmin456",
    "new_password": "admin123"
}

### 9. Verify Original Password Works
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "admin@slar.com",
    "password": "admin123"
}

# ========================================
# ADMIN USER MANAGEMENT TASKS
# ========================================

### 10. Create New Engineer User (Admin Task)
POST http://localhost:8080/users HTTP/1.1
Content-Type: application/json

{
    "name": "John Engineer",
    "email": "john.engineer@slar.com",
    "phone": "+1234567890",
    "role": "engineer",
    "team": "Backend Team",
    "password_hash": "engineer123"
}

### 11. Create New Manager User (Admin Task)
POST http://localhost:8080/users HTTP/1.1
Content-Type: application/json

{
    "name": "Sarah Manager",
    "email": "sarah.manager@slar.com",
    "phone": "+1234567891",
    "role": "manager",
    "team": "Platform Team",
    "password_hash": "manager123"
}

### 12. Login with New Engineer
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "john.engineer@slar.com",
    "password": "engineer123"
}

### 13. Login with New Manager
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "sarah.manager@slar.com",
    "password": "manager123"
}

### 14. Update User Role (Admin Task)
# First get user ID from step 10 response, then update
PUT http://localhost:8080/users/USER_ID_FROM_STEP_10 HTTP/1.1
Content-Type: application/json

{
    "name": "John Senior Engineer",
    "email": "john.engineer@slar.com",
    "phone": "+1234567890",
    "role": "senior_engineer",
    "team": "Backend Team"
}

# ========================================
# ADMIN SYSTEM MANAGEMENT
# ========================================

### 15. Get Current On-Call User
GET http://localhost:8080/oncall/current HTTP/1.1

### 16. Get All On-Call Schedules
GET http://localhost:8080/oncall/schedules HTTP/1.1

### 17. Get All Alerts
GET http://localhost:8080/alerts HTTP/1.1

### 18. Get Dashboard Data
GET http://localhost:8080/dashboard HTTP/1.1

### 19. Get Uptime Services
GET http://localhost:8080/uptime/services HTTP/1.1

### 20. Create Alert (Admin Task)
POST http://localhost:8080/alerts HTTP/1.1
Content-Type: application/json

{
    "title": "[ADMIN] System Maintenance Alert",
    "description": "Scheduled maintenance window from 2AM to 4AM",
    "severity": "medium",
    "source": "admin"
}

# ========================================
# ERROR HANDLING TESTS
# ========================================

### 21. Login with Missing Email
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "password": "admin123"
}

### 22. Login with Missing Password
POST http://localhost:8080/auth/login HTTP/1.1
Content-Type: application/json

{
    "email": "admin@slar.com"
}

### 23. Change Password with Wrong Current Password
POST http://localhost:8080/auth/change-password HTTP/1.1
Content-Type: application/json

{
    "user_id": "admin-user-id-001",
    "old_password": "wrongpassword",
    "new_password": "newpassword123"
}

### 24. Change Password for Non-existent User
POST http://localhost:8080/auth/change-password HTTP/1.1
Content-Type: application/json

{
    "user_id": "non-existent-user-id",
    "old_password": "admin123",
    "new_password": "newpassword123"
}

### 25. Create User with Duplicate Email
POST http://localhost:8080/users HTTP/1.1
Content-Type: application/json

{
    "name": "Duplicate Admin",
    "email": "admin@slar.com",
    "phone": "+9999999999",
    "role": "admin",
    "team": "System Admin",
    "password_hash": "duplicate123"
}

# ========================================
# ADMIN WORKFLOW SCENARIOS
# ========================================

### SCENARIO 1: Complete User Lifecycle
# 1. Admin creates new user
# 2. User logs in
# 3. User changes password
# 4. Admin updates user role
# 5. Admin deactivates user

### SCENARIO 2: Alert Management
# 1. Admin creates alert
# 2. Admin assigns alert to user
# 3. Admin acknowledges alert
# 4. Admin closes alert

### SCENARIO 3: On-Call Management
# 1. Admin creates on-call schedule
# 2. Admin checks current on-call user
# 3. Admin creates alert (auto-assigned)
# 4. Admin manages escalation

# ========================================
# QUICK REFERENCE
# ========================================
# Admin User Info:
# - ID: admin-user-id-001
# - Email: admin@slar.com
# - Password: admin123
# - Role: admin
# - Team: System Admin
#
# Available Roles:
# - admin: Full system access
# - manager: Team management
# - senior_engineer: Senior technical role
# - engineer: Standard technical role
#
# Available Teams:
# - System Admin
# - Platform Team
# - Backend Team
# - DevOps Team
# - Frontend Team 